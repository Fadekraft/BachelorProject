/*
 * Context switch.
 *
 * Copyright (C) 2003-2014 Juha Aatrokoski, Timo Lilja,
 *   Leena Salmela, Teemu Takanen, Aleksi Virtanen,
 *   Philip Meulengracht.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 * 3. The name of the author may not be used to endorse or promote
 *    products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id: cswitch.h,v 1.8 2003/05/08 12:13:48 ttakanen Exp $
 *
 */
#ifndef X86_CSWITCH_H
#define X86_CSWITCH_H

#include "lib/types.h"
#include "vm/memory.h"

/* Context save macros */
#define PUSHAQ		asm volatile("mov %r15, -0x8(%rsp)\n\t" \
				"mov %r14, -0x10(%rsp)\n\t" \
				"mov %r13, -0x18(%rsp)\n\t" \
				"mov %r12, -0x20(%rsp)\n\t" \
				"mov %r11, -0x28(%rsp)\n\t" \
				"mov %r10, -0x30(%rsp)\n\t" \
				"mov %r9,  -0x38(%rsp)\n\t" \
				"mov %r8,  -0x40(%rsp)\n\t" \
				"mov %rdi, -0x48(%rsp)\n\t" \
				"mov %rsi, -0x50(%rsp)\n\t" \
				"mov %rbp, -0x58(%rsp)\n\t" \
				"mov %rsp, -0x60(%rsp)\n\t" \
				"mov %rbx, -0x68(%rsp)\n\t" \
				"mov %rdx, -0x70(%rsp)\n\t" \
				"mov %rcx, -0x78(%rsp)\n\t" \
				"mov %rax, -0x80(%rsp)\n\t" \
				"sub $0x80, %rsp\n\t");

#define POPAQ		asm volatile("add $0x80, %rsp\n\t" \
				"mov -0x8(%rsp), %r15\n\t" \
				"mov -0x10(%rsp), %r14\n\t" \
				"mov -0x18(%rsp), %r13\n\t" \
				"mov -0x20(%rsp), %r12\n\t" \
				"mov -0x28(%rsp), %r11\n\t" \
				"mov -0x30(%rsp), %r10\n\t" \
				"mov -0x38(%rsp), %r9\n\t" \
				"mov -0x40(%rsp), %r8\n\t" \
				"mov -0x48(%rsp), %rdi\n\t" \
				"mov -0x50(%rsp), %rsi\n\t" \
				"mov -0x58(%rsp), %rbp\n\t" \
				"mov -0x68(%rsp), %rbx\n\t" \
				"mov -0x70(%rsp), %rdx\n\t" \
				"mov -0x78(%rsp), %rcx\n\t" \
				"mov -0x80(%rsp), %rax\n\t");
				//"mov -0x60(%rsp), %rsp\n\t"

/* Thread context data structure */
typedef struct {
    uint64_t *stack;   /* The stack */
    uint64_t rip;
    uint64_t flags;
    uint64_t pml4;
    pml4_t *virt_memory;

    void    *prev_context;   /* Previous context in a nested exception chain */
} context_t;

/* Code to be inserted to interrupt vector */
void _cswitch_vector_code(void);

/* Userland entering code */
void _cswitch_to_userland(context_t *usercontext);

/* Context manipulation */
void _context_init(context_t *cxt, virtaddr_t entry, virtaddr_t endentry, 
					virtaddr_t stack, uint32_t args);
void _context_enter_userland(context_t *cxt);
void _context_set_ip(context_t *cxt, virtaddr_t ip); /* Set new instruction pointer / program counter */
void _context_set_sp(context_t *cxt, virtaddr_t sp); /* Sets a new stack pointer */
void _context_enable_ints(context_t *cxt); /* Masks interrupts */

#endif
