/*
 * Exception Handling
 *
 * Copyright (C) 2003 Juha Aatrokoski, Timo Lilja,
 *   Leena Salmela, Teemu Takanen, Aleksi Virtanen.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 * 3. The name of the author may not be used to endorse or promote
 *    products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id: exception.h,v 1.0 2003/05/08 12:13:48 philip Exp $
 *
 */

#ifndef __EXCEPTIONS_H__
#define __EXCEPTIONS_H__

/* EXCEPTION HANDLERS */

// Divide by Zero Exception
void Exc_DivideByZero();

// Single Step Trap
void Exc_SingleStepTrap();

// Non Maskable Interrupt Trap
void Exc_NMI();

// Breakpoint Hit Trap
void Exc_BreakPoint();

// Overflow Exception
void Exc_Overflow();

// Bounds Check Trap
void Exc_BoundsCheckFault();

// Invalid Opcode / Instruction
void Exc_InvalidOpcode();

// Device is N/A
void Exc_NoDeviceFault();

// Double Fault (BSOD Time)
void Exc_DoubleFault();

// Invalid Task State Segment (TSS)
void Exc_InvalidTSS();

// Segment Not Present
void Exc_NoSegment();

// Stack Fault
void Exc_StackFault();

// General Protection Fault
void Exc_GPFault();

// Page Fault
void Exc_PageFault();

// Floating Point Unit (FPU) Error
void Exc_FPUFault();

// Alignment Check
void Exc_AlignmentCheck();

// Machine Check
void Exc_MachineCheck();

// Floating Point Unit (FPU) Single Instruction Multiple Data (SIMD) error
void Exc_SIMD_FPU();

//Setup Exceptions
void exception_init();

#endif
